plot(eset.expt.elapsedTime)  % gives the time(s)-frame relation, the slope is the time for each frame

t_frame = eset.expt.elapsedTime(2)  % approximate time for each frame

QUANTITYNAME	eset.expt.track(1).dq
	eti: time not in period

Three ways to get time of start to turn in period:
	
	1. Fail because tperiod isn't constant, so don't use mod
	turnStartTime =  t(j).getSubFieldDQ('reorientation', 'eti', 'position', 'start');  % time (s) not in period
	turnStart = mod(turnStartTime, tperiod);  % in period

	2. Fail because eset.expt.elapsedTime isn't a perfect line
	turnStartTime =  t(j).getSubFieldDQ('reorientation', 'eti', 'position', 'start');
	nperiod = (turnStartTime(end) -  turnStartTime(1)) / tperiod;  % could be decimal, tperiod not constant
	turnStart =  toff(round(turnStartTime/eset.expt.elapsedTime(2)));
	
	3. Hopefully right
	turnStart =  t(j).getSubFieldDQ('reorientation', 'led2Val_toff', 'position', 'start')

field: for all tracks

subfield: for certain track, like run, reorientation, or headSwing

External stimulation: eset.expt.globalQuantity.fieldname

When analyzing 'CS@NA\T_Bl_10s_on_10s_off_Sq_0to250_20_10_50_250uWcm2', I think the value 'led2Val' is wrong because the length is longer.
Also 'eset.expt.addTonToff('led2Val', 'square');' fails to addTonToff, I guess because the stimulation is not pure square wave, there are constant gaps between square wave.

Does reorientation also include pause? Yes. The track is divided into 'run' and 'reorientation'

getSubFieldDQ doesn't work with inds or ind--------------------
eset.expt.track(3).getSubFieldDQ('reorientation', 'eti', 'inds = [1 2 3]', 'position', 'start')
still give all reorientation start time, instead of only first 3 reorientation.

d = dir(fullfile(basedir, 'matfiles', '*.mat'));
eset = ExperimentSet.fromMatFiles(fullfile(basedir, 'matfiles', {d(i).name})); % load the i-th .mat, probably won't load tracks for i=1
eset = ExperimentSet.fromMatFiles(fullfile(basedir, 'matfiles', {d.name})); % load all .mat into eset.expt(i), i = 1,2,3, need to check if all tracks are loaded

eset.expt.globalQuantity.fieldname;  % will output all fieldname available in the experiment, e.g.,
% 'led2Val',  'led2ValDeriv', 'led2ValDiff', after addTonToff, a few more will appear, e.g., 
'led2Val_high', 'led2Val_low',  'led2Val_ton', 'led2Val_toff', 'led2Val_cyclenum_on', 'led2Val_cyclenum_off'
eset.gatherField('fieldname');  % will get the values of fieldname

? How does the software get the value 'led2Val'? The length of 'led2Val' is much longer than the stimulation bin file and experiment time.
We will get a BIN file contain information of LED intensity (PWM, per bit) output right after finishing experiment, together with MMF file. e.g.,
'CS@NA_T_Bl_Sq_8to15PWM_20_202306011350 led2 values.bin'. Its shape is probably different from the stimulation BIN file generated by Matlab, 
but the same as the beginning part of fieldname 'led2Val'.

To get the turn start time of track 1 of experiment 1
t = eset.expt(1).track;
t(1).getSubFieldDQ('reorientation', 'eti', 'position', 'start')
Attention, the method below is wrong, although output the same length array, but the values are wrong compared with video.
eset.expt(1).elapsedTime([t(1).reorientation.startInd]).

t(1).startFrame is right.







Clone Track-Extraction-Software and Matlab-Track-Analysis to the same folder, because function process_mmfs_gershow needs to call extract-stack.exe in Track-Extraction-Software folder. Also if these folders are not in C drive, they should under Apps-SU to run .exe program.

processing_params_paulsmall.m defines extraction_settings.bxx with minArea as 10 pixels, and overallThreshold 20 pixels different from default extraction parameters. To use it, just include it as an extra parameters when running process_mmfs_gershow.m.
The default setting of extraction is saved in Track-Extraction-Software\WindowsBinaries\extract-stack.exe. You can find it if running .\extract-stack.exe under its directory in Windows PowerShell.

When running process_MMF.m @Yiming, CMD will pop up. When it shows 'finished!', the first autoprocess is finished.

When collecting data, for the experiments without all files saved, the process_MMF will ingnore the incomplete folder.

processMMF needs half of experiment time, and processBIN needs double experiment time.

calibration files should be copied to 'variability_extraced\......_sup data' automatically after running processMMF, otherwise processBIN won't work,
also the name to camcalinfo.mat and checkerboard_1cm.png

For the case if same experiments are repeated, run processMMF once will process the earliest folder. After getting BIN file, run processMMF again to process the second earliest MMF.

The folder in start directory, and containing MMF files shouldn't named with more than 8 numbers in the beginning, and should have subfolders. (ref: findBaseDirectories)

Some sections of code in processDirectoryToMatfiles.m are not executed, like 'eset = ' and 'eset.execute', I doubt these codes generate matfiles. Why some data has matfiles while others don't have?

Check if setdirectory is executed well!!!!!

If processMMF fails for the first set of data in one folder, the following data sets don't have a chance to be processed.
If processMMF gets BIN out of a data set and there is warning, the following data will be also processed.

This warning from processMMF will give BIN but not MAT
Warning: could not find camera calibration info for

If acquisition time is 40 or 70 min, processMMF will have warning and processBIN will fail.
If acquisition time is 20 or 19 min, succeed!

If number of maggots is less than 46, data analysis succeed;
if number exceeds 60, it fails.

Multiple experiments with the same stimulation and gene condition. If the first one fails to be analyzed, the following one would also fail.
Therefore, delete the first one and analyze again.

When starting acquization, the region of interest (ROI) will shrink. This is only how it looks like. Actually the ROI is the initial square you created.

Run 'begin experiment' in led control panel every time before experiment to check what bin files are uploaded. The bin files uploaded last time probably are saved.